worker_processes  4;
worker_cpu_affinity 0001 0010 0100 1000;
worker_rlimit_nofile 65535;

error_log  logs/error.log  crit;
pid        logs/nginx.pid;

events {
    use epoll;
    worker_connections  65535;
}

http {
    include       mime.types;
    default_type  application/json;

    #log_format  main  '$proxy_add_x_forwarded_for - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent"';
    log_format main '[$time_local] ; $remote_addr ;"$http_x_forwarded_for" ; $status ; $body_bytes_sent ; http://$host$request_uri ;$http_referer ; $content_length ; "$request_body" ; $upstream_addr ; $upstream_status; $upstream_response_time; $request_time; $upstream_cache_status';
    access_log  logs/access.log  main;

    sendfile        on;
    keepalive_timeout  5;
    server_tokens  off;

    gzip  on;
    gzip_comp_level 5;
    gzip_min_length 3k;
    gzip_buffers 4 8k;
    gzip_types   text/plain text/css text/xml application/x-javascript application/json;

    server_names_hash_bucket_size 128;
    client_header_buffer_size 32k;
    large_client_header_buffers 4 32k;
    client_max_body_size 10m;

    proxy_intercept_errors  on;
    fastcgi_intercept_errors  on;

    proxy_set_header Host  $host;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;

    map $upstream_addr $upstream_id {
        default   -;
        ~\d+\.\d+\.(?P<id>\d+\.\d+)   $id;
    }
    add_header  P-Via  X$upstream_id;
    add_header  P-Cache  $upstream_cache_status;

    # access stats
    lua_shared_dict access 48m;
    log_by_lua_file conf/monitor/log_access.lua;
    # healthcheck shared
    lua_shared_dict healthcheck 1m;

    server  {
        listen 1080 default;
        server_name _;
        # health check api
        location = /health/status {
            access_log off;
            content_by_lua '
                local healthcheck = ngx.shared.healthcheck
                local status = healthcheck:get("status")
                if status then
                    ngx.status = ngx.HTTP_FORBIDDEN
                    ngx.print("offline")
                else
                    ngx.status = ngx.HTTP_OK
                    ngx.print("alive")
                end
            ';
        }
        location = /health/active {
            allow 127.0.0.1;
            allow 10.100.20.36;
            allow 192.168.51.178;
            deny all;
            content_by_lua '
                local healthcheck = ngx.shared.healthcheck
                healthcheck:set("status", nil)
                ngx.print("ok")
            ';
        }
        location = /health/offline {
            allow 127.0.0.1;
            allow 10.100.20.36;
            allow 192.168.51.178;
            deny all;
            content_by_lua '
                local healthcheck = ngx.shared.healthcheck
                healthcheck:set("status", "offline")
                ngx.print("ok")
            ';
        }

        location = /monitor {
            allow 127.0.0.1;
            access_log off;
            deny all;
            content_by_lua_file conf/monitor/domain_status.lua;
        }

        location / {
            return 403;
        }

    }

    include  servers/*.conf;

}

